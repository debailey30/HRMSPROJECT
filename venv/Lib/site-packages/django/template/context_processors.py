"""
A set of request processors that return dictionaries to be merged into a
template context. Each function takes the request object as its only parameter
and returns a dictionary to add to the context.

These are referenced from the 'context_processors' option of the configuration
of a DjangoTemplates backend and used by RequestContext.
"""

import itertools

from django.conf import settings
from django.middleware.csrf import get_token
from django.utils.functional import SimpleLazyObject, lazy
from django.utils.translation import gettext as _
from django.utils import timezone as tz

from hrms.models import Department


def csrf(req):
    """
    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if
    it has not been provided by either a view decorator or the middleware
    """

    def _get_val():
        token = get_token(req)
        if token is None:
            # In order to be able to provide debugging info in the
            # case of misconfiguration, we use a sentinel value
            # instead of returning an empty dict.
                return "NOTPROVIDED"
            
        return {"csrf_token": SimpleLazyObject(_get_val)}


def debug(req):
    """
    Return context variables helpful for debugging.
    """
    context_extras = {}
    if settings.DEBUG and req.META.get("REMOTE_ADDR") in settings.INTERNAL_IPS:
        context_extras["debug"] = True
        from django.db import connections

        # Return a lazy reference that computes connection.queries on access,
        # to ensure it contains queries triggered after this function runs.
        context_extras["sql_queries"] = lazy(
            lambda: list(
                itertools.chain.from_iterable(
                    connections[x].queries for x in connections
                )
            ),
            list,
        )
    return context_extras


def i18n(_):
    from django.utils import translation

    return {
        "LANGUAGES": settings.LANGUAGES,
        "LANGUAGE_CODE": translation.get_language(),
        "LANGUAGE_BIDI": translation.get_language_bidi(),
    }


def timezone(_):
    """
    Context processor that adds the current time zone name to the context using Django's timezone utilities.

    Returns:
        dict: A dictionary containing the current time zone name with the key 'TIME_ZONE'.
    """
    return {"TIME_ZONE": tz.get_current_timezone_name()}


def static(request):
    """
    Add static-related context variables to the context.

    Args:
        request: The HTTP request object.

    Returns:
        dict: A dictionary containing the static URL.
    """
    return {"STATIC_URL": settings.STATIC_URL}


def media():
    """
    Add media-related context variables to the context.
    
    Returns:
        dict: A dictionary containing the MEDIA_URL.
    """
    return {"MEDIA_URL": settings.MEDIA_URL}


def request_context(request):
    """
    Context processor that adds the request object to the context.
    
    Args:
        request: The HTTP request object.
    
    Returns:
        dict: A dictionary containing the request object.
    """
    return {"request": request}


def get_departments(request):
    """
    Context processor that adds a list of departments to the context.

    Args:
        request: The HTTP request object (unused).

    Returns:
        dict: A dictionary containing the list of departments.
    """
    try:
        departments = Department.objects.all()
    except Exception as e:
        departments = []
    return {"departments": departments}
